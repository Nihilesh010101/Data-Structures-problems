#include<bits/stdc++.h>
using namespace std;

int main(){
    int n, m;
    cin>>n>>m;
    vector<pair<int, int>> adj[n+1]; //1 indexed graph
    for(int i=0;i<m;i++){
        int u,v,wt;
        cin>>u>>v>>wt;
        adj[u].push_back(make_pair(v,wt));
        adj[v].push_back(make_pair(u,wt));
    }
    int source;
    cin>>source;
    int dist[n+1];
    for(int i=0;i<n+1;i++) dist[i]=INT_MAX;
    dist[0]=-1; //invalid due to 1 indexed graph
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; //dist, prev
    pq.push(make_pair(0, source));
    dist[source]=0;
    while(!pq.empty()){
        int dis=pq.top().first;
        int prev=pq.top().second;
        pq.pop();
        for(auto it: adj[prev]){
            int node=it.first;
            int weight=it.second;
            if(dist[node] >  dist[prev]+weight){
                dist[node]=dist[prev]+weight;
                pq.push(make_pair(dist[node], node));
            }
        }
    }
    for(int i=0;i<n+1;i++){
        cout<<dist[i]<<" ";
    }
    return 0;
}
